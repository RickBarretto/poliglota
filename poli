#! /usr/bin/env arturo

;; Script that empowers `poliglota`
;; please, read readme or type `./poli --help` to get aid

usage: {:

 USAGE: poli COMMAND [OPTIONS] [ARGS]...

 Options:
    -h, --help  Show this message and exit

 Commands:
    new      Create a new project
    add      Add an implementation to a project
    fill     Fill a project with missing implementations

 ---------  --------------------

 Usage: poli new [OPTIONS] <project>
        poli new [OPTIONS] {-l|--last}

 Options:
    -e, --empty     project is empty
    -l, --last      uses the last interacted project

 ---------  --------------------

 Usage: poli add [OPTIONS] <template> <project>
        poli add [OPTIONS] <template> {-l|--last}

 Options:
    --as <name>     Create with a new name
    -e, --empty     Implementation is empty
    -l, --last      uses the last interacted project

 ---------  --------------------

 Usage: poli fill <project>

:}

saveLast: $[project :string][
    ;; description: « save the last interacted repository to "info.json"
    ;; example: {
    ;;      saveLast "my-project"
    ;; }

    file: read.json "info.json"
    file\last: project
    write.json "info.json" file
]


; -- COMMANDS:

newProject: $[name :string][
    ;; description: « creates a new project
    ;; options: [
    ;;      empty: :bool « new project is empty
    ;; ]
    ;; sideEffects: [
    ;;      'exit
    ;;      'saveLast
    ;; ]

    if exists? .directory ~"repository/|name|" [
        panic ~"\"|name|\" already exists"
    ]


    if attr? 'empty [
        try? -> execute ~"mkdir repository/|name|/"
        else -> panic ~"Can't create \"|name|\""
        saveLast name
        exit
    ]

    try? -> copy.directory ~"templates/" ~"repository/|name|/"
    else -> panic ~"Can't create \"|name|\""
    saveLast name
    exit

]

addImplementation: $[
    template :string
    project :string
    implementation :string
][
    ;; description: « add an implementation to a project
    ;; options: [
    ;;      empty: :bool « new implementation is empty
    ;; ]
    ;; sideEffects: [
    ;;      'exit
    ;;      'saveLast
    ;; ]

    if not? exists? .directory ~"repository/|project|" [
        panic ~{
            "|project|" doesn't exist. Please, use `new` command. See:

            |usage|
        }
    ]

    if exists? .directory ~"repository/|project|/|implementation|" [
        panic ~"\"|implementation|\" already exists within \"|project|\"."
    ]

    if attr? 'empty [
        try? -> execute ~"mkdir repository/|project|/|implementation|"
        else -> panic ~"Can't create \"|implementation|\" within \"|project|\"."
        saveLast project
        exit
    ]

    try? -> copy.directory ~"templates/|template|/"
                ~"repository/|project|/|implementation|"
    else -> panic ~"Can't create \"|implementation|\" inside \"|project|\"."
    saveLast project
    exit
]

fillProject: $[project :string][
    ;; description: « fill project with missing implementations
    ;; sideEffects: [
    ;;      'exit
    ;;      'saveLast
    ;; ]

    if not? exists? .directory ~"repository/|project|" [
        panic ~{
            "|project|" doesn't exist. Please, use `new` command. See:

            |usage|
        }
    ]

    try? -> execute
        ~"cp templates/** repository/|project| --recursive --no-preserve=timestamp --no-clobber"
    else -> panic ~"Can't fill \"|project|\"."
    saveLast project
    exit

]

; -- PARSER

minimal: [args number][
    ;; description: « raises error if args were insufficient
    ;; sideEffects: [
    ;;      ensure
    ;; ]

    ensure -> args\[number]
]

parser: $[args][
    ;; description: « parse command-line arguments
    ;; sideEffects: [
    ;;      'ensure
    ;;      'exit
    ;;      'panic
    ;;      'saveLast
    ;; ]

    if some? ["--help" "-h"] 'op -> in? op args [
        print usage
        exit
    ]

    f: first args
    case [f]
    when? [= "new"] [

        drop 'args 1

        if some? ["--empty" "-e"] 'op -> in? op args [
            remove 'args ["--empty" "-e"]
            ensure -> minimal args 1
            newProject.empty (first args)
        ]

        minimal args 1
        newProject (first args)

    ]

    when? [= "add"] [

        drop 'args 1
        minimal args 2

        newName: false
        if in? "--as" args [
            minimal args 4
            i: index args "--as"
            remove 'args "--as"
            newName: (get args i)
            remove 'args newName
        ]

        emptyFlag: false
        if some? ["--empty" "-e"] 'op -> in? op args [
            remove 'args ["--empty" "-e"]
            ensure -> minimal args 2
            emptyFlag: true
        ]

        lastFlag: false
        if some? ["--last" "-l"] 'op -> in? op args [
            remove 'args ["--last" "-l"]
            ensure -> minimal args 1

            information: read.json "info.json"
            if information\last <> ""
                -> lastFlag: information\last
        ]

        if and? string? newName true? emptyFlag
        -> panic ~{
                You can't use `--as` and `--empty` at the same time.
                Your arguments: |arg|
                |usage|
            }

        if logical? lastFlag [
            try? -> minimal args 2
            else -> panic ~"You didn't interact with any project yet."
        ]

        template: (get args 0)
        project: (string? lastFlag)?
            -> lastFlag
            ->(get args 1)
        name: (string? newName)?
            -> newName
            -> template

        try? [
            ensure -> template != "--as"
            ensure -> project != "--as"
            ensure -> name != "--as"
        ]
        else -> ~"Your arguments: |arg|\n|usage|"

        (true? emptyFlag)?
        -> addImplementation.empty template project name
        -> addImplementation template project name

    ]

    when? [= "fill"] [
        drop 'args 1
        minimal args 1
        fillProject (first args)
    ]


    else -> panic ~"Your arguments: |arg|\n|usage|"

]

parser arg
