#! /usr/bin/env arturo

usage: {:
  COMMANDS:
    new <project>
    new <project> --empty
    add <template> <project>
    add <template> <project> --as <implementation>

  FUTURE?
    add <implementation> <project> --empty
    fill <project>
:}


; -- COMMANDS:

newProject: $[name :string][

    if exists? .directory ~"repository/|name|" [
        panic ~"\"|name|\" already exists"
    ]


    if attr? 'empty [
        try? -> execute ~"mkdir repository/|name|/"
        else -> panic ~"Can't create \"|name|\""
        exit
    ]

    try? -> copy.directory ~"templates/" ~"repository/|name|/"
    else -> panic ~"Can't create \"|name|\""
    exit

]

addImplementation: $[
    template :string
    project :string
    implementation :string
][

    if not? exists? .directory ~"repository/|project|" [
        panic ~{
            "|project|" doesn't exist. Please, use `new` command. See:

            |usage|
        }
    ]

    if exists? .directory ~"repository/|project|/|implementation|" [
        panic ~"\"|implementation|\" already exists within \"|project|\"."
    ]

    if attr? 'empty [
        try? -> execute ~"mkdir repository/|project|/|implementation|"
        else -> panic ~"Can't create \"|implementation|\" within \"|project|\"."
        exit
    ]

    try? -> copy.directory ~"templates/|template|/"
                ~"repository/|project|/|implementation|"
    else -> panic ~"Can't create \"|implementation|\" inside \"|project|\"."
    exit
]

; -- PARSER

minimal: [args number][
    ensure -> args\[number]
]

parser: $[args][

    f: first args
    case [f]
    when? [= "new"] [

        drop 'args 1

        if some? ["--help" "-h"] 'op -> in? op args [
            ; help.new
        ]

        if some? ["--empty" "-e"] 'op -> in? op args [
            remove 'args ["--empty" "-e"]
            ensure -> minimal args 1
            newProject.empty (first args)
        ]

        minimal args 1
        newProject (first args)

    ]

    when? [= "add"] [

        drop 'args 1
        minimal args 2

        if some? ["--help" "-h"] 'op -> in? op args [
            ; help.new
        ]

        newName: false
        if in? "--as" args [
            minimal args 4
            i: index args "--as"
            remove 'args "--as"
            newName: (get args i)
            remove 'args newName
        ]

        emptyFlag: false
        if some? ["--empty" "-e"] 'op -> in? op args [
            remove 'args ["--empty" "-e"]
            ensure -> minimal args 2
            emptyFlag: true
        ]

        if and? string? newName true? emptyFlag
        -> panic ~{
                You can't use `--as` and `--empty` at the same time.
                Your arguments: |arg|
                |usage|
            }

        template: (get args 0)
        project: (get args 1)
        name: (string? newName)?
            -> newName
            -> template

        try? [
            ensure -> template != "--as"
            ensure -> project != "--as"
            ensure -> name != "--as"
        ]
        else -> ~"Your arguments: |arg|\n|usage|"

        (true? emptyFlag)?
        -> addImplementation.empty template project name
        -> addImplementation template project name

    ]


    else -> panic ~"Your arguments: |arg|\n|usage|"

]

parser arg
